{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-01-17T11:24:50.974990Z","iopub.execute_input":"2023-01-17T11:24:50.975365Z","iopub.status.idle":"2023-01-17T11:24:50.988393Z","shell.execute_reply.started":"2023-01-17T11:24:50.975333Z","shell.execute_reply":"2023-01-17T11:24:50.984849Z"},"trusted":true},"execution_count":286,"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"![](https://i.pinimg.com/originals/8a/17/ba/8a17baa38518709469915741d11cea1a.gif)","metadata":{}},{"cell_type":"markdown","source":"# Name and ID\n\n**1. Name: Tamir Spilberg**\n\n**2. Kaggle_Account: https://www.kaggle.com/tamirspil**","metadata":{}},{"cell_type":"markdown","source":"# TL;DR #\nThis is my first take on the ML problem known as the Titanic disaster survival prediction problem.\nin this notebook i'm going to study how to apply the concepts of Machine learning i've learned and apply them into real world problems.\nI'm going to study how to use the Data and the various parameters and learn how to handle them in the correct way.\nI'm going to try the different python tools of ploting to learn how visualize my findings.\nAnd most of all i'm going to learn how build a model and check its LOSS and Accuracy.","metadata":{}},{"cell_type":"markdown","source":"# Exercise 1","metadata":{}},{"cell_type":"markdown","source":"# EDA","metadata":{}},{"cell_type":"markdown","source":"**Import All Needed Libraries**","metadata":{}},{"cell_type":"code","source":"%%HTML\n<script src=\"require.js\"></script>","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:24:50.994467Z","iopub.execute_input":"2023-01-17T11:24:50.995138Z","iopub.status.idle":"2023-01-17T11:24:51.011915Z","shell.execute_reply.started":"2023-01-17T11:24:50.995103Z","shell.execute_reply":"2023-01-17T11:24:51.009446Z"},"trusted":true},"execution_count":287,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<script src=\"require.js\"></script>\n"},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.io as pio\nfrom sklearn.preprocessing import MinMaxScaler\nimport sklearn\nfrom sklearn import metrics\nfrom sklearn import datasets\nfrom sklearn import pipeline\nfrom sklearn import linear_model\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn import neural_network\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import KFold\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import make_scorer, accuracy_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.decomposition import PCA\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.metrics import roc_curve, roc_auc_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.naive_bayes import GaussianNB \n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\nsns.set()","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:24:51.015270Z","iopub.execute_input":"2023-01-17T11:24:51.015684Z","iopub.status.idle":"2023-01-17T11:24:51.042651Z","shell.execute_reply.started":"2023-01-17T11:24:51.015650Z","shell.execute_reply":"2023-01-17T11:24:51.039909Z"},"trusted":true},"execution_count":288,"outputs":[]},{"cell_type":"markdown","source":"**Importing Dataset**","metadata":{}},{"cell_type":"code","source":"train_cp = pd.read_csv(\"/kaggle/input/titanic/train.csv\").copy()\ntest_cp = pd.read_csv('/kaggle/input/titanic/test.csv').copy()\ntest_id = test_cp['PassengerId']\ntarget = train_cp['Survived']\ntrain_cp.head()","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:24:51.053791Z","iopub.execute_input":"2023-01-17T11:24:51.054600Z","iopub.status.idle":"2023-01-17T11:24:51.115632Z","shell.execute_reply.started":"2023-01-17T11:24:51.054561Z","shell.execute_reply":"2023-01-17T11:24:51.112851Z"},"trusted":true},"execution_count":289,"outputs":[{"execution_count":289,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"**Display titanic.csv test data, create a copy.**","metadata":{}},{"cell_type":"markdown","source":"**Look into the first 5 rows of the DataSet**\n\n1. **PassengerId**: An unique index for passenger rows. It starts from 1 for first row and increments by 1 for every new rows.\n2. **Survived**: Shows if the passenger survived or not. 1 stands for survived and 0 stands for not survived.\n3. **Pclass**: Ticket class. 1 stands for First class ticket. 2 stands for Second class ticket. 3 stands for Third class ticket.\n4. **Name**: Passenger's name. Name also contain title. \"Mr\" for man. \"Mrs\" for woman. \"Miss\" for girl. \"Master\" for boy.\n5. **Sex**: Passenger's sex. It's either Male or Female.\n6. **Age**: Passenger's age. \"NaN\" values in this column indicates that the age of that particular passenger has not been recorded.\n7. **SibSp**: Number of siblings or spouses travelling with each passenger.\n8. **Parch**: Number of parents of children travelling with each passenger.\n9. **Ticket**: Ticket number.\n10. **Fare**: How much money the passenger has paid for the travel journey.\n11. **Cabin**: Cabin number of the passenger. \"NaN\" values in this column indicates that the cabin number of that particular passenger has not been recorded.\n12. **Embarked**: Port from where the particular passenger was embarked/boarded.\n","metadata":{}},{"cell_type":"markdown","source":"**First, Lets dive into the data**","metadata":{}},{"cell_type":"code","source":"train_cp.info()","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:24:51.120094Z","iopub.execute_input":"2023-01-17T11:24:51.120444Z","iopub.status.idle":"2023-01-17T11:24:51.143616Z","shell.execute_reply.started":"2023-01-17T11:24:51.120410Z","shell.execute_reply":"2023-01-17T11:24:51.141489Z"},"trusted":true},"execution_count":290,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"From looking at the data we can note two things:\n\n1. Age is missing for many rows: of all 891 rows Cabin is represented at 714\n2. Cabni is missing for many as rows: of all 891 rows Cabin is represented at 204","metadata":{}},{"cell_type":"code","source":"# Missing values\ntrain_cp.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:24:51.151294Z","iopub.execute_input":"2023-01-17T11:24:51.152549Z","iopub.status.idle":"2023-01-17T11:24:51.171651Z","shell.execute_reply.started":"2023-01-17T11:24:51.152510Z","shell.execute_reply":"2023-01-17T11:24:51.168673Z"},"trusted":true},"execution_count":291,"outputs":[{"execution_count":291,"output_type":"execute_result","data":{"text/plain":"PassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"**The target is to understand the correlaction between 'Survived' and the other features**\n\nLets visualize the features with respect to 'Survived' and check if theres a connection","metadata":{}},{"cell_type":"markdown","source":"# Pclass vs Survived","metadata":{}},{"cell_type":"code","source":"# plotting the pclass vs survived\npclass_survived = train_cp.groupby('Pclass').Survived.value_counts()\npclass_survived.unstack(level=0).plot(kind='bar', subplots=False)\npclass_survived_average = train_cp[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()\npclass_survived_average","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:24:51.176435Z","iopub.execute_input":"2023-01-17T11:24:51.176774Z","iopub.status.idle":"2023-01-17T11:24:52.122270Z","shell.execute_reply.started":"2023-01-17T11:24:51.176743Z","shell.execute_reply":"2023-01-17T11:24:52.119508Z"},"trusted":true},"execution_count":292,"outputs":[{"execution_count":292,"output_type":"execute_result","data":{"text/plain":"   Pclass  Survived\n0       1  0.629630\n1       2  0.472826\n2       3  0.242363","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.629630</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>0.472826</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0.242363</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"**Note that the 1st and 2nd class tickets have a better change of survival than the 3rd**","metadata":{}},{"cell_type":"markdown","source":"# Sex vs Survived","metadata":{}},{"cell_type":"code","source":"# The above statement can be clearly understood from the plot below.\nsex_survival = train_cp.groupby('Sex').Survived.value_counts()\nsex_survival.unstack(level=0).plot(kind='bar', subplots=False)\nsex_survived_average = train_cp[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()\nsex_survived_average","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:24:52.125471Z","iopub.execute_input":"2023-01-17T11:24:52.125851Z","iopub.status.idle":"2023-01-17T11:24:52.980868Z","shell.execute_reply.started":"2023-01-17T11:24:52.125795Z","shell.execute_reply":"2023-01-17T11:24:52.977989Z"},"trusted":true},"execution_count":293,"outputs":[{"execution_count":293,"output_type":"execute_result","data":{"text/plain":"      Sex  Survived\n0  female  0.742038\n1    male  0.188908","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sex</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>female</td>\n      <td>0.742038</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>male</td>\n      <td>0.188908</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"***note that femals have higher chance of survival***","metadata":{}},{"cell_type":"markdown","source":"# Fare vs Survived","metadata":{}},{"cell_type":"code","source":"# The above statement can be clearly understood from the plot below.\nfare_cut = train_cp[['Survived','Fare']]\nfare_cut['FareBand'] = pd.qcut(train_cp['Fare'], 4)\nprint (fare_cut[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean())\n\nplt.figure(figsize=(20,10))\nax = sns.boxplot(x=\"Survived\", y=\"Fare\", data=train_cp)\nax.set_ylim([0, 120])","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:24:52.985739Z","iopub.execute_input":"2023-01-17T11:24:52.986386Z","iopub.status.idle":"2023-01-17T11:24:53.698183Z","shell.execute_reply.started":"2023-01-17T11:24:52.986354Z","shell.execute_reply":"2023-01-17T11:24:53.695351Z"},"trusted":true},"execution_count":294,"outputs":[{"name":"stdout","text":"          FareBand  Survived\n0   (-0.001, 7.91]  0.197309\n1   (7.91, 14.454]  0.303571\n2   (14.454, 31.0]  0.454955\n3  (31.0, 512.329]  0.581081\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n","output_type":"stream"},{"execution_count":294,"output_type":"execute_result","data":{"text/plain":"(0.0, 120.0)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1440x720 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"***We can also understand that 1st class pay much more and therefor high fare also mean higher suvival chance***","metadata":{}},{"cell_type":"code","source":"sns.catplot(\n    data=train_cp,\n    x=\"Pclass\", y=\"Fare\", hue=\"Survived\")","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:24:53.707919Z","iopub.execute_input":"2023-01-17T11:24:53.708306Z","iopub.status.idle":"2023-01-17T11:24:55.747473Z","shell.execute_reply.started":"2023-01-17T11:24:53.708272Z","shell.execute_reply":"2023-01-17T11:24:55.744439Z"},"trusted":true},"execution_count":295,"outputs":[{"execution_count":295,"output_type":"execute_result","data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7f9ba53be490>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 421.55x360 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"# Parch vs Survived","metadata":{}},{"cell_type":"code","source":"print(train_cp[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean())\nsns.barplot(x='Parch', y='Survived', ci=None, data=train_cp) ","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:24:55.752839Z","iopub.execute_input":"2023-01-17T11:24:55.753623Z","iopub.status.idle":"2023-01-17T11:24:56.532064Z","shell.execute_reply.started":"2023-01-17T11:24:55.753581Z","shell.execute_reply":"2023-01-17T11:24:56.529262Z"},"trusted":true},"execution_count":296,"outputs":[{"name":"stdout","text":"   Parch  Survived\n0      0  0.343658\n1      1  0.550847\n2      2  0.500000\n3      3  0.600000\n4      4  0.000000\n5      5  0.200000\n6      6  0.000000\n","output_type":"stream"},{"execution_count":296,"output_type":"execute_result","data":{"text/plain":"<AxesSubplot:xlabel='Parch', ylabel='Survived'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"# SibSp vs Survievd","metadata":{}},{"cell_type":"code","source":"print(train_cp[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean())\nsns.barplot(x='SibSp', y='Survived', ci=None, data=train_cp)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:24:56.536446Z","iopub.execute_input":"2023-01-17T11:24:56.536823Z","iopub.status.idle":"2023-01-17T11:24:57.272363Z","shell.execute_reply.started":"2023-01-17T11:24:56.536774Z","shell.execute_reply":"2023-01-17T11:24:57.269749Z"},"trusted":true},"execution_count":297,"outputs":[{"name":"stdout","text":"   SibSp  Survived\n0      0  0.345395\n1      1  0.535885\n2      2  0.464286\n3      3  0.250000\n4      4  0.166667\n5      5  0.000000\n6      8  0.000000\n","output_type":"stream"},{"execution_count":297,"output_type":"execute_result","data":{"text/plain":"<AxesSubplot:xlabel='SibSp', ylabel='Survived'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"# Check correlaction SibSP and Parch ","metadata":{}},{"cell_type":"markdown","source":"**SibSP and Parch are related to family size and therefor might have a correlation between them.\nLets check it out:**","metadata":{}},{"cell_type":"code","source":"df = pd.DataFrame()\ndf['FamilySize'] = train_cp['SibSp'] + train_cp['Parch'] + 1\ndf['Survived'] = train_cp['Survived']\nsns.relplot(\n    data=df, kind=\"line\",\n    x=\"FamilySize\", y=\"Survived\")","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:24:57.275759Z","iopub.execute_input":"2023-01-17T11:24:57.276433Z","iopub.status.idle":"2023-01-17T11:24:59.945041Z","shell.execute_reply.started":"2023-01-17T11:24:57.276390Z","shell.execute_reply":"2023-01-17T11:24:59.942418Z"},"trusted":true},"execution_count":298,"outputs":[{"execution_count":298,"output_type":"execute_result","data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7f9ba49b1c50>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 360x360 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"**We can definitely see from the graph the a family with the size of 4 has the higher change to survive, and the larger the family is, the survival chance is smaller. Therefor we should combine both Parh and SibSp into one variable 'FamilySize' for more accurate results.**","metadata":{}},{"cell_type":"code","source":"def FamilySizeSet(*dataSets):\n    for df in dataSets:\n        df['FamilySize'] = df['SibSp'] + df['Parch'] + 1\n\nFamilySizeSet(train_cp, test_cp)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:24:59.947867Z","iopub.execute_input":"2023-01-17T11:24:59.948374Z","iopub.status.idle":"2023-01-17T11:24:59.961305Z","shell.execute_reply.started":"2023-01-17T11:24:59.948326Z","shell.execute_reply":"2023-01-17T11:24:59.958883Z"},"trusted":true},"execution_count":299,"outputs":[]},{"cell_type":"markdown","source":"# Age vs Survived","metadata":{}},{"cell_type":"code","source":"total_survived = train_cp[train_cp['Survived']==1]\ntotal_not_survived = train_cp[train_cp['Survived']==0]\nplt.figure(figsize=[15,5])\nplt.subplot(111)\nsns.distplot(total_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=True, color='blue')\nsns.distplot(total_not_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=True, color='red', axlabel='Age')","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:24:59.968286Z","iopub.execute_input":"2023-01-17T11:24:59.968677Z","iopub.status.idle":"2023-01-17T11:25:02.180168Z","shell.execute_reply.started":"2023-01-17T11:24:59.968642Z","shell.execute_reply":"2023-01-17T11:25:02.178055Z"},"trusted":true},"execution_count":300,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/seaborn/distributions.py:2619: FutureWarning:\n\n`distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n\n/opt/conda/lib/python3.7/site-packages/seaborn/distributions.py:2619: FutureWarning:\n\n`distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n\n","output_type":"stream"},{"execution_count":300,"output_type":"execute_result","data":{"text/plain":"<AxesSubplot:xlabel='Age', ylabel='Density'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1080x360 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"**for the graph above we can note few things:**\n\n1. children within the age of 0 to 5 have a high chance of survival\n2. overall, the distribution of survived or not in relation to 'age' is fairly the same.","metadata":{}},{"cell_type":"markdown","source":"# Embarked vs Survived","metadata":{}},{"cell_type":"code","source":"print(train_cp[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean())\nsns.barplot(x='Embarked', y='Survived', data=train_cp)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:02.183198Z","iopub.execute_input":"2023-01-17T11:25:02.183585Z","iopub.status.idle":"2023-01-17T11:25:03.246704Z","shell.execute_reply.started":"2023-01-17T11:25:02.183551Z","shell.execute_reply":"2023-01-17T11:25:03.244670Z"},"trusted":true},"execution_count":301,"outputs":[{"name":"stdout","text":"  Embarked  Survived\n0        C  0.553571\n1        Q  0.389610\n2        S  0.336957\n","output_type":"stream"},{"execution_count":301,"output_type":"execute_result","data":{"text/plain":"<AxesSubplot:xlabel='Embarked', ylabel='Survived'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"# Survivers Count","metadata":{}},{"cell_type":"code","source":"survived = train_cp[train_cp['Survived'] == 1]\nnot_survived = train_cp[train_cp['Survived'] == 0]\n\nprint (\"Survived: %i (%.1f%%)\"%(len(survived), float(len(survived))/len(train_cp)*100.0))\nprint (\"Not Survived: %i (%.1f%%)\"%(len(not_survived), float(len(not_survived))/len(train_cp)*100.0))\nprint (\"Total: %i\"%len(train_cp))","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:03.251380Z","iopub.execute_input":"2023-01-17T11:25:03.251875Z","iopub.status.idle":"2023-01-17T11:25:03.271449Z","shell.execute_reply.started":"2023-01-17T11:25:03.251835Z","shell.execute_reply":"2023-01-17T11:25:03.268460Z"},"trusted":true},"execution_count":302,"outputs":[{"name":"stdout","text":"Survived: 342 (38.4%)\nNot Survived: 549 (61.6%)\nTotal: 891\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Fill all empty cells with NaN**","metadata":{}},{"cell_type":"code","source":"def fillNaN(*dataSets):\n    for df in dataSets:\n        df.replace('', np.NaN, inplace=True)\n        df.fillna(np.NaN, inplace=True)\n    \nfillNaN(train_cp, test_cp)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:03.277135Z","iopub.execute_input":"2023-01-17T11:25:03.277569Z","iopub.status.idle":"2023-01-17T11:25:03.296731Z","shell.execute_reply.started":"2023-01-17T11:25:03.277531Z","shell.execute_reply":"2023-01-17T11:25:03.293066Z"},"trusted":true},"execution_count":303,"outputs":[]},{"cell_type":"markdown","source":"**Fill all Age 'NaN' values with the median**\n","metadata":{}},{"cell_type":"code","source":"def setMedianByType(dataSets, attributes ,types):\n    for df in dataSets:\n        colChange, colCheck = attributes # in this case, change col age according to sex\n        df_not_null = df[~train_cp[colChange].isnull()]\n        for typ in types:\n            median = df_not_null.loc[df_not_null[colCheck] == typ][colChange].median()\n            df.loc[(df.Age.isnull()) & (df.Sex == typ), colChange] = median\n\ntypes = ('male','female')\nattributes = ('Age','Sex')\ndataSets = (test_cp, train_cp)\nsetMedianByType(dataSets ,attributes ,types)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:03.299502Z","iopub.execute_input":"2023-01-17T11:25:03.299856Z","iopub.status.idle":"2023-01-17T11:25:03.341038Z","shell.execute_reply.started":"2023-01-17T11:25:03.299796Z","shell.execute_reply":"2023-01-17T11:25:03.337661Z"},"trusted":true},"execution_count":304,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:4: UserWarning:\n\nBoolean Series key will be reindexed to match DataFrame index.\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**use method 'Encoding' to numerize 'Sex' and 'Embarked'**\n\nWe encode the categorical values of Sex and Embarked into numeric values. \n\n1. We represent 0 as female and 1 as male.\n2. We represent 2 as S, 1 as C and 0 as Q.","metadata":{}},{"cell_type":"code","source":"def encodeSex(dataSets):\n    sex_map ={'male': int(1), 'female': int(0)}\n    for df in dataSets:\n        df['Sex'] = df['Sex'].map(sex_map)\n\ndef encodeEmbarked(dataSets):\n    embarked_map = {'S':int(2), 'C':int(1), 'Q':int(0)}\n    for df in dataSets:\n        # We found that category \"S\" has maximum passengers. Hence, we replace \"nan\" values with \"S\".\n        df['Embarked'] = df['Embarked'].fillna('S')\n        df['Embarked'] = df['Embarked'].map(embarked_map)\n\ndef fill_na_median(dataSets, column_name):\n    for df in dataSets:\n        df_not_null = df[~df[column_name].isnull()]\n        df[column_name].fillna(df_not_null[column_name].median(), inplace=True) \n\ndataSets = (train_cp, test_cp)\nfor func in (encodeSex, encodeEmbarked):\n    func(dataSets)\n    \nfill_na_median(dataSets, 'Fare')\n\ntrain_cp.head()","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:03.354340Z","iopub.execute_input":"2023-01-17T11:25:03.354680Z","iopub.status.idle":"2023-01-17T11:25:03.407625Z","shell.execute_reply.started":"2023-01-17T11:25:03.354649Z","shell.execute_reply":"2023-01-17T11:25:03.405007Z"},"trusted":true},"execution_count":305,"outputs":[{"execution_count":305,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name  Sex   Age  SibSp  Parch  \\\n0                            Braund, Mr. Owen Harris    1  22.0      1      0   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...    0  38.0      1      0   \n2                             Heikkinen, Miss. Laina    0  26.0      0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    0  35.0      1      0   \n4                           Allen, Mr. William Henry    1  35.0      0      0   \n\n             Ticket     Fare Cabin  Embarked  FamilySize  \n0         A/5 21171   7.2500   NaN         2           2  \n1          PC 17599  71.2833   C85         1           2  \n2  STON/O2. 3101282   7.9250   NaN         2           1  \n3            113803  53.1000  C123         2           2  \n4            373450   8.0500   NaN         2           1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>FamilySize</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>1</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>0</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>0</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"**Normalizing nurmerical attributes: 'Age' and 'Fares'**\n","metadata":{}},{"cell_type":"code","source":"def featuresNormalization(df, features):\n        minmax_scale = MinMaxScaler().fit(df[features])\n        df[features] = minmax_scale.transform(df[features])\n        \nfeatures = ['Age','Fare']\nfeaturesNormalization(train_cp, features)\nfeaturesNormalization(test_cp, features)\n\ntrain_cp.head()\n","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:03.415028Z","iopub.execute_input":"2023-01-17T11:25:03.415560Z","iopub.status.idle":"2023-01-17T11:25:03.460561Z","shell.execute_reply.started":"2023-01-17T11:25:03.415524Z","shell.execute_reply":"2023-01-17T11:25:03.456766Z"},"trusted":true},"execution_count":306,"outputs":[{"execution_count":306,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name  Sex       Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    1  0.271174      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...    0  0.472229      1   \n2                             Heikkinen, Miss. Laina    0  0.321438      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    0  0.434531      1   \n4                           Allen, Mr. William Henry    1  0.434531      0   \n\n   Parch            Ticket      Fare Cabin  Embarked  FamilySize  \n0      0         A/5 21171  0.014151   NaN         2           2  \n1      0          PC 17599  0.139136   C85         1           2  \n2      0  STON/O2. 3101282  0.015469   NaN         2           1  \n3      0            113803  0.103644  C123         2           2  \n4      0            373450  0.015713   NaN         2           1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>FamilySize</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>1</td>\n      <td>0.271174</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>0.014151</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>0</td>\n      <td>0.472229</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>0.139136</td>\n      <td>C85</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>0</td>\n      <td>0.321438</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>0.015469</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>0</td>\n      <td>0.434531</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>0.103644</td>\n      <td>C123</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>1</td>\n      <td>0.434531</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>0.015713</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"**We drop unnecessary columns/features and keep only the useful ones for our experiment. Column PassengerId is only dropped from Train set because we need PassengerId in Test set while creating Submission file to Kaggle.**","metadata":{}},{"cell_type":"code","source":"drop_list = [\"PassengerId\",\"Name\",\"Ticket\",\"Cabin\"]\n\ntrain_cp.drop(drop_list, axis=1, inplace=True)\ntest_cp.drop(drop_list, axis=1, inplace=True)\n\n#Dealing with NULL values\n\ntrain_cp.fillna(train_cp.mean(), inplace=True) #Replace NULL values with mean values\ntest_cp.fillna(test_cp.mean(), inplace=True)\n\nassert train_cp.isnull().values.any() == False, \"Still contains NaN\"","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:03.467726Z","iopub.execute_input":"2023-01-17T11:25:03.468582Z","iopub.status.idle":"2023-01-17T11:25:03.493904Z","shell.execute_reply.started":"2023-01-17T11:25:03.468545Z","shell.execute_reply":"2023-01-17T11:25:03.491339Z"},"trusted":true},"execution_count":307,"outputs":[]},{"cell_type":"markdown","source":"**Understading the correlation between Survived and the other attributes\nStrongest attributes are 'Sex' and 'Pclass'**","metadata":{}},{"cell_type":"code","source":"# show absolute correlation between features in a heatmap\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nplt.figure(figsize=(12,10))\ncor = np.abs(train_cp.corr())\nsns.heatmap(cor, annot=True,\n            cmap=plt.cm.Reds, vmin=-1, vmax=1)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:03.496582Z","iopub.execute_input":"2023-01-17T11:25:03.497796Z","iopub.status.idle":"2023-01-17T11:25:08.766608Z","shell.execute_reply.started":"2023-01-17T11:25:03.497747Z","shell.execute_reply":"2023-01-17T11:25:08.762232Z"},"trusted":true},"execution_count":308,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 864x720 with 2 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"# **using train_test_split for unbiased evaluation of prediction performance**","metadata":{}},{"cell_type":"markdown","source":"**lets look at the graphs of the traning accuracy and validation accuracy inorder to choose the best train and test size split**","metadata":{}},{"cell_type":"code","source":"t = train_cp['Survived'].copy()\nX = train_cp.drop('Survived',axis=1)\n# print 4 graphs: mse of train/test and r2 of train/test\ndef print_graphs_r2_mse(graph_points):\n    for k, v in graph_points.items():\n        best_value = max(v.values()) if 'R2' in k else min(v.values())\n        best_index = np.argmax(list(v.values())) if 'R2' in k else np.argmin(list(v.values()))\n        color = 'red' if 'train' in k else 'blue'\n        fig = px.scatter(x=v.keys(), y=v.values(), title=f'{k}, best value: x={best_index + 1}, y={best_value}', color_discrete_sequence=[color])\n        fig.data[0].update(mode='markers+lines')\n        fig.show()\n\n# plot the score by split and the loss by split\ndef plot_score_and_loss_by_split(X, t):\n    graph_points = {\n                    'train_MSE':{},\n                    'validation_MSE': {},\n                    'train_ACC': {},\n                    'validation_ACC': {}\n                    }\n    for size in range(10, 100, 10):\n        X_train, X_val, t_train, t_val = model_selection.train_test_split(\n            X.values, t.values, test_size=size/100, random_state=42)\n        NE_reg = linear_model.LinearRegression().fit(X_train, t_train)\n        y_train = NE_reg.predict(X_train)\n        y_val = NE_reg.predict(X_val)\n        graph_points['train_MSE'][size/100] = metrics.mean_squared_error(t_train, y_train)\n        graph_points['validation_MSE'][size/100] = metrics.mean_squared_error(t_val, y_val)\n        graph_points['train_ACC'][size/100] = NE_reg.score(X_train, t_train)\n        graph_points['validation_ACC'][size/100] = NE_reg.score(X_val, t_val)\n    print_graphs_r2_mse(graph_points)\n\nplot_score_and_loss_by_split(X, t)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:08.772468Z","iopub.execute_input":"2023-01-17T11:25:08.775560Z","iopub.status.idle":"2023-01-17T11:25:09.135678Z","shell.execute_reply.started":"2023-01-17T11:25:08.775520Z","shell.execute_reply":"2023-01-17T11:25:09.133237Z"},"trusted":true},"execution_count":309,"outputs":[{"output_type":"display_data","data":{"text/html":"<div>                            <div id=\"1deb24ed-7faf-4cbf-bea7-c11325f96fe3\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"1deb24ed-7faf-4cbf-bea7-c11325f96fe3\")) {                    Plotly.newPlot(                        \"1deb24ed-7faf-4cbf-bea7-c11325f96fe3\",                        [{\"hovertemplate\":\"x=%{x}<br>y=%{y}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":\"red\",\"symbol\":\"circle\"},\"mode\":\"markers+lines\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9],\"xaxis\":\"x\",\"y\":[0.14556130874767137,0.1448384670729048,0.14612068700639053,0.14186210489451662,0.1438245083354034,0.14938315504891692,0.14874925431113128,0.13053071599633773,0.08546997216990898],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"x\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"y\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"train_MSE, best value: x=9, y=0.08546997216990898\"}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('1deb24ed-7faf-4cbf-bea7-c11325f96fe3');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<div>                            <div id=\"2da0c756-bbaa-42ff-9d2a-56869ffd6ded\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"2da0c756-bbaa-42ff-9d2a-56869ffd6ded\")) {                    Plotly.newPlot(                        \"2da0c756-bbaa-42ff-9d2a-56869ffd6ded\",                        [{\"hovertemplate\":\"x=%{x}<br>y=%{y}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":\"blue\",\"symbol\":\"circle\"},\"mode\":\"markers+lines\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9],\"xaxis\":\"x\",\"y\":[0.11714852650960286,0.1342596874556728,0.1350507256230651,0.14835030691964285,0.14296062332925255,0.14093821860125602,0.14351644706328398,0.15355384419820065,0.16126462892937735],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"x\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"y\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"validation_MSE, best value: x=1, y=0.11714852650960286\"}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('2da0c756-bbaa-42ff-9d2a-56869ffd6ded');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<div>                            <div id=\"45530829-348b-4ab7-85b7-81ed2726e52e\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"45530829-348b-4ab7-85b7-81ed2726e52e\")) {                    Plotly.newPlot(                        \"45530829-348b-4ab7-85b7-81ed2726e52e\",                        [{\"hovertemplate\":\"x=%{x}<br>y=%{y}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":\"red\",\"symbol\":\"circle\"},\"mode\":\"markers+lines\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9],\"xaxis\":\"x\",\"y\":[0.3834272050319224,0.3829417788439001,0.37368941462250027,0.3956220342237644,0.3803931544376654,0.35768537613979545,0.35972795612931796,0.4369318984849605,0.5768702190263445],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"x\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"y\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"train_ACC, best value: x=6, y=0.35768537613979545\"}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('45530829-348b-4ab7-85b7-81ed2726e52e');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<div>                            <div id=\"cdf9ea18-3d80-4362-a948-0beca979d6f4\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"cdf9ea18-3d80-4362-a948-0beca979d6f4\")) {                    Plotly.newPlot(                        \"cdf9ea18-3d80-4362-a948-0beca979d6f4\",                        [{\"hovertemplate\":\"x=%{x}<br>y=%{y}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":\"blue\",\"symbol\":\"circle\"},\"mode\":\"markers+lines\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9],\"xaxis\":\"x\",\"y\":[0.5118811395433214,0.4463559014456613,0.44339913254426866,0.37919955783420134,0.4049932971321828,0.40992274268409523,0.3973052190281141,0.3536414547975105,0.32533705560576787],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"x\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"y\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"validation_ACC, best value: x=9, y=0.32533705560576787\"}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('cdf9ea18-3d80-4362-a948-0beca979d6f4');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"},"metadata":{}}]},{"cell_type":"markdown","source":"**According to the graphs above, the optimal hyperparameter(test_size) is 0.1**\n\n**lets split the original train set to train and test according to this finding**","metadata":{}},{"cell_type":"code","source":"X_train, X_test, t_train, t_test =\\\n sklearn.model_selection.train_test_split(\n    X, t, test_size=0.1, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:09.139354Z","iopub.execute_input":"2023-01-17T11:25:09.140540Z","iopub.status.idle":"2023-01-17T11:25:09.154108Z","shell.execute_reply.started":"2023-01-17T11:25:09.140501Z","shell.execute_reply":"2023-01-17T11:25:09.150844Z"},"trusted":true},"execution_count":310,"outputs":[]},{"cell_type":"markdown","source":"# First method: SGD","metadata":{}},{"cell_type":"code","source":"# create the SGDClassifier and predict the probabilities of the train and test data\ndef SGD(X_train, t_train):\n    SGD_cls = pipeline.make_pipeline(\n        preprocessing.StandardScaler(),\n         linear_model.SGDClassifier(loss='log', alpha=0,\n                                    learning_rate='constant',\n                                    eta0=0.01)\n         ).fit(X_train, t_train)\n    return SGD_cls\n\nSGD_cls = SGD(X_train, t_train)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:09.157937Z","iopub.execute_input":"2023-01-17T11:25:09.158978Z","iopub.status.idle":"2023-01-17T11:25:09.188528Z","shell.execute_reply.started":"2023-01-17T11:25:09.158941Z","shell.execute_reply":"2023-01-17T11:25:09.185942Z"},"trusted":true},"execution_count":311,"outputs":[]},{"cell_type":"markdown","source":"**accuracy score and CE loss of the train and test of SGD**","metadata":{}},{"cell_type":"code","source":"print('Accuracy score on train',\n      round(SGD_cls.score(X_train, t_train) * 100, 2))\nprint('Accuracy score on test',\n      round(SGD_cls.score(X_test, t_test) * 100, 2))\nprint()\nprint('CE on train',\n      metrics.log_loss(t_train, SGD_cls.predict_proba(X_train)))\nprint('CE on test', \n      metrics.log_loss(t_test, SGD_cls.predict_proba(X_test)))\n","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:09.191330Z","iopub.execute_input":"2023-01-17T11:25:09.191666Z","iopub.status.idle":"2023-01-17T11:25:09.233684Z","shell.execute_reply.started":"2023-01-17T11:25:09.191627Z","shell.execute_reply":"2023-01-17T11:25:09.231246Z"},"trusted":true},"execution_count":312,"outputs":[{"name":"stdout","text":"Accuracy score on train 79.78\nAccuracy score on test 85.56\n\nCE on train 0.4507547687133078\nCE on test 0.3699663572676385\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Second method: Logistic Regression","metadata":{}},{"cell_type":"code","source":"def LR(X_train, t_train):\n    LR_clf = LogisticRegression()\n    LR_clf.fit(X_train, t_train)\n    return LR_clf\n\nLR_clf = LR(X_train, t_train)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:09.237901Z","iopub.execute_input":"2023-01-17T11:25:09.239216Z","iopub.status.idle":"2023-01-17T11:25:09.333388Z","shell.execute_reply.started":"2023-01-17T11:25:09.239177Z","shell.execute_reply":"2023-01-17T11:25:09.330405Z"},"trusted":true},"execution_count":313,"outputs":[]},{"cell_type":"markdown","source":"**Checking predictions and ACC of LR**","metadata":{}},{"cell_type":"code","source":"print('Accuracy score on train',\n      round(LR_clf.score(X_train, t_train) * 100, 2))\nprint('Accuracy score on test',\n      round(LR_clf.score(X_test, t_test) * 100, 2))\nprint()\nprint('CE on train',\n      metrics.log_loss(t_train, LR_clf.predict_proba(X_train)))\nprint('CE on test', \n      metrics.log_loss(t_test, LR_clf.predict_proba(X_test)))","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:09.340178Z","iopub.execute_input":"2023-01-17T11:25:09.340534Z","iopub.status.idle":"2023-01-17T11:25:09.378204Z","shell.execute_reply.started":"2023-01-17T11:25:09.340503Z","shell.execute_reply":"2023-01-17T11:25:09.375631Z"},"trusted":true},"execution_count":314,"outputs":[{"name":"stdout","text":"Accuracy score on train 79.78\nAccuracy score on test 83.33\n\nCE on train 0.450933230684099\nCE on test 0.3803594551455684\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Third method: MLP","metadata":{}},{"cell_type":"code","source":"def MLP(X_train, t_train):\n    MLP_cls = neural_network.MLPClassifier(\n        activation='logistic',\n         solver='sgd', alpha=0, max_iter=10000\n         ).fit(X_train, t_train)\n    return MLP_cls\n\nMLP_cls = MLP(X_train, t_train)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:09.384367Z","iopub.execute_input":"2023-01-17T11:25:09.384714Z","iopub.status.idle":"2023-01-17T11:25:12.544549Z","shell.execute_reply.started":"2023-01-17T11:25:09.384680Z","shell.execute_reply":"2023-01-17T11:25:12.528244Z"},"trusted":true},"execution_count":315,"outputs":[]},{"cell_type":"markdown","source":"**Checking predictions and ACC of MLG**","metadata":{}},{"cell_type":"code","source":"print('Accuracy score on train',\n      round(MLP_cls.score(X_train, t_train) * 100, 2))\nprint('Accuracy score on test',\n      round(MLP_cls.score(X_test, t_test) * 100, 2))\nprint()\nprint('CE on train',\n      metrics.log_loss(t_train, MLP_cls.predict_proba(X_train)))\nprint('CE on test',\n      metrics.log_loss(t_test, MLP_cls.predict_proba(X_test)))","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:12.576550Z","iopub.execute_input":"2023-01-17T11:25:12.577909Z","iopub.status.idle":"2023-01-17T11:25:12.880481Z","shell.execute_reply.started":"2023-01-17T11:25:12.577841Z","shell.execute_reply":"2023-01-17T11:25:12.878133Z"},"trusted":true},"execution_count":316,"outputs":[{"name":"stdout","text":"Accuracy score on train 61.8\nAccuracy score on test 60.0\n\nCE on train 0.6766771665663648\nCE on test 0.690011210289497\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**We found out the most accurate method should be LR.**","metadata":{}},{"cell_type":"markdown","source":"# Exercise 3","metadata":{}},{"cell_type":"markdown","source":"# TL;DR\n\nThis is my second take on Titanic disaster survival prediction problem.\n\nin this notebook i'm going to study how to apply the new concepts i've learned since my first take on this mission.\n\nI'm going to use different and more complex algorithms such as KNN, NBC and LDA.\n\nI'm going to experiment with different hyper-paramters to see if it changes the results.\n\nIn the end, I'll evaluate the performance of a model, accuracy, precision, recall and f1_score are common metric used with Confusion matrix, KPI's and ROC.","metadata":{}},{"cell_type":"markdown","source":"# Feature Selection\n**First, we will use Backward Feature Selection, we start from the full feature set and remove features until we reach the number of minimum features or until we reach the best score.**","metadata":{}},{"cell_type":"code","source":"# find best subset of features on this dataset\n\ndef find_best_subset(df, target):\n    df = df.drop('Survived', axis=1)\n    \n    numerical_cols = df.select_dtypes(include=['uint8','int64', 'float64']).columns\n    categorical_cols = df.select_dtypes(include=['object', 'bool']).columns\n    all_cols = categorical_cols.tolist() + numerical_cols.tolist()\n\n    ct_enc_std = ColumnTransformer([\n            (\"encoding\", OrdinalEncoder(), categorical_cols),\n            (\"standard\", StandardScaler(), numerical_cols)])\n    \n    df_train_encoded = pd.DataFrame(ct_enc_std.fit_transform(df, target),columns=all_cols)\n    \n    selector = RFECV(\n        SGDRegressor(random_state=42),\n        cv=RepeatedKFold(n_splits=5, n_repeats=10, random_state=42)\n        ).fit(df_train_encoded, target)\n\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=[i for i in range(1, len(selector.feature_names_in_) + 1)]\n                             , y=selector.cv_results_['mean_test_score']))\n    fig.update_xaxes(title_text=\"Number of features selected\")\n    fig.update_yaxes(title_text=\"Cross validation R2 score\")\n    # fig.show()\n    \n    return df_train_encoded.loc[:, selector.support_].columns\n\ncols_subset = find_best_subset(train_cp, train_cp['Survived'])","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:12.888304Z","iopub.execute_input":"2023-01-17T11:25:12.888677Z","iopub.status.idle":"2023-01-17T11:25:14.831094Z","shell.execute_reply.started":"2023-01-17T11:25:12.888635Z","shell.execute_reply":"2023-01-17T11:25:14.829257Z"},"trusted":true},"execution_count":317,"outputs":[]},{"cell_type":"markdown","source":"![](https://i.ibb.co/Pt4r5sk/feature-selection.png)","metadata":{}},{"cell_type":"code","source":"print(\"there are \",len(cols_subset), \"left\")\ntrain_cp = train_cp[cols_subset]\ntest_cp = test_cp[cols_subset]\ntrain_cp['Survived'] = target","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:14.838020Z","iopub.execute_input":"2023-01-17T11:25:14.841188Z","iopub.status.idle":"2023-01-17T11:25:14.855606Z","shell.execute_reply.started":"2023-01-17T11:25:14.841150Z","shell.execute_reply":"2023-01-17T11:25:14.852773Z"},"trusted":true},"execution_count":318,"outputs":[{"name":"stdout","text":"there are  7 left\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:4: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**CV Functions for model checking**","metadata":{}},{"cell_type":"code","source":"# find generator length\nfrom tqdm.auto import tqdm\n\ndef find_generator_len(generator, use_pbar=True):\n    i = 0\n    \n    if use_pbar:\n        pbar = tqdm(desc='Calculating Length',\n                    ncols=1000,\n                    bar_format='{desc}{bar:10}{r_bar}')\n\n    for a in generator:\n        i += 1\n\n        if use_pbar:\n            pbar.update()\n\n    if use_pbar:\n        pbar.close()\n\n    return i","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:14.859135Z","iopub.execute_input":"2023-01-17T11:25:14.859769Z","iopub.status.idle":"2023-01-17T11:25:14.872090Z","shell.execute_reply.started":"2023-01-17T11:25:14.859734Z","shell.execute_reply":"2023-01-17T11:25:14.867497Z"},"trusted":true},"execution_count":319,"outputs":[]},{"cell_type":"code","source":"# calculate score and loss from cv (k or LPO) and display graphs\ndef get_cv_score_and_loss(X, t, model, transformer=None,\n                          k=None, p=None,\n                          show_score_loss_graphs=False, use_pbar=True):\n    scores_losses_df = pd.DataFrame(columns=['fold_id', 'split', 'score', 'loss'])\n\n    if k is not None:\n        cv = KFold(n_splits=k, shuffle=True, random_state=42)\n    elif p is not None:\n        cv = LeavePOut(p)\n    else:\n        raise ValueError('you need to specify k or p in order for the cv to work')\n\n    if use_pbar:\n        pbar = tqdm(desc='Computing Models',\n                    total=find_generator_len(cv.split(X)))\n\n    for i, (train_ids, val_ids) in enumerate(cv.split(X)):\n        X_train = X.loc[train_ids]\n        t_train = t.loc[train_ids] \n        X_val = X.loc[val_ids]\n        t_val = t.loc[val_ids]\n        \n        model.fit(X_train, t_train)\n\n        y_train = model.predict(X_train)\n        y_val = model.predict(X_val)\n        \n        scores_losses_df.loc[len(scores_losses_df)] =\\\n         [i, 'train', model.score(X_train, t_train),\n          mean_squared_error(t_train, y_train)]\n        scores_losses_df.loc[len(scores_losses_df)] =\\\n         [i, 'val', model.score(X_val, t_val), mean_squared_error(t_val, y_val)]\n\n        if use_pbar:\n            pbar.update()\n\n    if use_pbar:\n        pbar.close()\n\n    val_scores_losses_df = scores_losses_df[scores_losses_df['split']=='val']\n    train_scores_losses_df = scores_losses_df[scores_losses_df['split']=='train']\n\n    mean_val_score = val_scores_losses_df['score'].mean()\n    mean_val_loss = val_scores_losses_df['loss'].mean()\n    mean_train_score = train_scores_losses_df['score'].mean()\n    mean_train_loss = train_scores_losses_df['loss'].mean()\n\n    if show_score_loss_graphs:\n        fig = px.line(scores_losses_df, x='fold_id', y='score', color='split', title=f'Mean Val Score: {mean_val_score:.2f}, Mean Train Score: {mean_train_score:.2f}')\n        #fig.show()\n        fig = px.line(scores_losses_df, x='fold_id', y='loss', color='split', title=f'Mean Val Loss: {mean_val_loss:.2f}, Mean Train Loss: {mean_train_loss:.2f}')\n        #fig.show()\n\n    return mean_val_score, mean_val_loss, mean_train_score, mean_train_loss","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:14.876295Z","iopub.execute_input":"2023-01-17T11:25:14.877988Z","iopub.status.idle":"2023-01-17T11:25:14.897382Z","shell.execute_reply.started":"2023-01-17T11:25:14.877935Z","shell.execute_reply":"2023-01-17T11:25:14.894695Z"},"trusted":true},"execution_count":320,"outputs":[]},{"cell_type":"code","source":"train_cp_no_t = train_cp.drop('Survived',axis=1)\nnumerical_cols = train_cp_no_t.select_dtypes(include=['uint8','int64', 'float64']).columns\ncategorical_cols = train_cp_no_t.select_dtypes(include=['object', 'bool']).columns\nct = ColumnTransformer([\n        (\"encoding\", OrdinalEncoder(), categorical_cols),\n        (\"standard\", StandardScaler(), numerical_cols)])","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:14.902466Z","iopub.execute_input":"2023-01-17T11:25:14.904403Z","iopub.status.idle":"2023-01-17T11:25:14.923848Z","shell.execute_reply.started":"2023-01-17T11:25:14.904359Z","shell.execute_reply":"2023-01-17T11:25:14.920890Z"},"trusted":true},"execution_count":321,"outputs":[]},{"cell_type":"markdown","source":"**We are going to use 3 different algorithms to build our model:**\n\n1. **KNN**: We choose the k and the model will calculate the prediction for each test sample, based on the closest k training samples to the test sample.\n\n1. **NBC(Naive Bayes)**: a set of supervised learning algorithms based on applying Bayes’ theorem with the \"naive\" assumption of conditional independence between every pair of features given the value of the class variable.\n\n1. **LDA**: generalization of Fisher's linear discriminant, a method used in statistics and other fields, to find a linear combination of features that characterizes or separates two or more classes of objects or events.","metadata":{}},{"cell_type":"markdown","source":"# HyperParamters","metadata":{}},{"cell_type":"markdown","source":"**Most of our models have a lot of parameters that can be adjusted. Each parameter value can make our model better (or worse). We want to be able to find the best hyperparameters for our models. We have two approaches:**\n\n1. Grid Search\n1. Random Search\n\n**Lets use, Grid Search to find the best hyper-parameters for KNN, NBC and LDA**","metadata":{}},{"cell_type":"code","source":"# train with grid search and get best parameters\nX_normalized = StandardScaler().fit_transform(train_cp_no_t)\nhyper_parameters = {'penalty': ('l2', 'l1', 'elasticnet'),\n                    'alpha':[0.0001, 0.001, 0.01, 0.1]}\n\ngs_model = GridSearchCV(\n    SGDClassifier(random_state=42),\n     hyper_parameters).fit(X_normalized, target)\n\nprint('Accuracy score for classification:')\nprint('gs_model', gs_model.best_score_)\nprint('best params', gs_model.best_params_)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:14.929606Z","iopub.execute_input":"2023-01-17T11:25:14.930359Z","iopub.status.idle":"2023-01-17T11:25:15.649408Z","shell.execute_reply.started":"2023-01-17T11:25:14.930323Z","shell.execute_reply":"2023-01-17T11:25:15.647114Z"},"trusted":true},"execution_count":322,"outputs":[{"name":"stdout","text":"Accuracy score for classification:\ngs_model 0.7890465130876907\nbest params {'alpha': 0.0001, 'penalty': 'elasticnet'}\n","output_type":"stream"}]},{"cell_type":"code","source":"# run KNN on the dataset and find best K by accuracy\nfrom sklearn.neighbors import KNeighborsClassifier\n\nhyper_parameters = {'n_neighbors': list(range(1, 20))}\n\ngs_neigh_model = GridSearchCV(KNeighborsClassifier(n_neighbors=5), hyper_parameters).fit(X_normalized.tolist(), target)\nprint('Accuracy score for classification:')\nprint('gs_neigh_model', gs_neigh_model.best_score_)\nprint('best params', gs_neigh_model.best_params_)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:15.655425Z","iopub.execute_input":"2023-01-17T11:25:15.655778Z","iopub.status.idle":"2023-01-17T11:25:21.110453Z","shell.execute_reply.started":"2023-01-17T11:25:15.655746Z","shell.execute_reply":"2023-01-17T11:25:21.107370Z"},"trusted":true},"execution_count":323,"outputs":[{"name":"stdout","text":"Accuracy score for classification:\ngs_neigh_model 0.8170610758897748\nbest params {'n_neighbors': 18}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# KNN","metadata":{}},{"cell_type":"code","source":"model_pipe = make_pipeline(ct, KNeighborsClassifier(n_neighbors=18))\nval_score, val_loss, train_score, train_loss =\\\n get_cv_score_and_loss(train_cp_no_t, target,\n                       model_pipe, transformer=None,\n                       k=10, show_score_loss_graphs=True)\n\nprint(f'mean cv val score: {val_score:.2f}\\nmean cv val loss {val_loss:.2f}')\nprint(f'mean cv train score: {train_score:.2f}\\nmean cv train loss {train_loss:.2f}')","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:21.113891Z","iopub.execute_input":"2023-01-17T11:25:21.115909Z","iopub.status.idle":"2023-01-17T11:25:27.666064Z","shell.execute_reply.started":"2023-01-17T11:25:21.115859Z","shell.execute_reply":"2023-01-17T11:25:27.663795Z"},"trusted":true},"execution_count":324,"outputs":[{"output_type":"display_data","data":{"text/plain":"Calculating Length          | 0/? [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c1abc01cb1d749dd916f3d73667c92ab"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Computing Models:   0%|          | 0/10 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"40a6262a3c91418681d10dbc352f5a56"}},"metadata":{}},{"name":"stdout","text":"mean cv val score: 0.81\nmean cv val loss 0.19\nmean cv train score: 0.83\nmean cv train loss 0.17\n","output_type":"stream"}]},{"cell_type":"markdown","source":"![](https://i.ibb.co/bdTvrKR/knn1.png)\n![](https://i.ibb.co/8ghRGk7/knn2.png)","metadata":{}},{"cell_type":"markdown","source":"# NBC","metadata":{}},{"cell_type":"code","source":"# use grid search to find best pca component on the data for nbc\nmodel_pipe = Pipeline([('pca', 'passthrough'),\n                       ('nbc', GaussianNB())])\n\nhyper_parameters = {'pca': [PCA()],\n                    'pca__n_components': list(range(1, len(train_cp_no_t.columns)-3))}\n\ngs_model = GridSearchCV(model_pipe, hyper_parameters).fit(train_cp_no_t, target)\nprint('Accuracy score for classification:')\nprint('gs_model', gs_model.best_score_)\nprint('best params', gs_model.best_params_)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:27.670691Z","iopub.execute_input":"2023-01-17T11:25:27.672469Z","iopub.status.idle":"2023-01-17T11:25:29.565157Z","shell.execute_reply.started":"2023-01-17T11:25:27.672401Z","shell.execute_reply":"2023-01-17T11:25:29.560959Z"},"trusted":true},"execution_count":325,"outputs":[{"name":"stdout","text":"Accuracy score for classification:\ngs_model 0.7116376875274621\nbest params {'pca': PCA(n_components=2), 'pca__n_components': 2}\n","output_type":"stream"}]},{"cell_type":"code","source":"model_pipe = make_pipeline(ct, GaussianNB())\nval_score, val_loss, train_score, train_loss =\\\n get_cv_score_and_loss(train_cp_no_t, target,\n                       model_pipe, transformer=None,\n                       k=10, show_score_loss_graphs=True)\n\nprint(f'mean cv val score: {val_score:.2f}\\nmean cv val loss {val_loss:.2f}')\nprint(f'mean cv train score: {train_score:.2f}\\nmean cv train loss {train_loss:.2f}')","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:29.579392Z","iopub.execute_input":"2023-01-17T11:25:29.580144Z","iopub.status.idle":"2023-01-17T11:25:30.871934Z","shell.execute_reply.started":"2023-01-17T11:25:29.580068Z","shell.execute_reply":"2023-01-17T11:25:30.868461Z"},"trusted":true},"execution_count":326,"outputs":[{"output_type":"display_data","data":{"text/plain":"Calculating Length          | 0/? [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ba83d100a8a94eaf897b122651c5a373"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Computing Models:   0%|          | 0/10 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6da978b1008c4cf0b55502c5663534a4"}},"metadata":{}},{"name":"stdout","text":"mean cv val score: 0.79\nmean cv val loss 0.21\nmean cv train score: 0.79\nmean cv train loss 0.21\n","output_type":"stream"}]},{"cell_type":"markdown","source":"![](https://i.ibb.co/nrmxCFT/bnc1.png)\n![](https://i.ibb.co/hDWXJxb/bnc2.png)","metadata":{}},{"cell_type":"markdown","source":"# LDA","metadata":{}},{"cell_type":"code","source":"# use grid search to find best pca component on the data for lda\nmodel_pipe = Pipeline([('pca', 'passthrough'),\n                       ('nbc', LinearDiscriminantAnalysis())])\n\nhyper_parameters = {'pca': [PCA()],\n                    'pca__n_components': list(range(1, len(train_cp_no_t.columns)-3))}\n\ngs_model = GridSearchCV(model_pipe, hyper_parameters).fit(train_cp_no_t, target)\nprint('Accuracy score for classification:')\nprint('gs_model', gs_model.best_score_)\nprint('best params', gs_model.best_params_)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:30.876701Z","iopub.execute_input":"2023-01-17T11:25:30.877107Z","iopub.status.idle":"2023-01-17T11:25:33.316281Z","shell.execute_reply.started":"2023-01-17T11:25:30.877071Z","shell.execute_reply":"2023-01-17T11:25:33.312847Z"},"trusted":true},"execution_count":327,"outputs":[{"name":"stdout","text":"Accuracy score for classification:\ngs_model 0.6824618668005775\nbest params {'pca': PCA(n_components=3), 'pca__n_components': 3}\n","output_type":"stream"}]},{"cell_type":"code","source":"model_pipe = make_pipeline(ct, LinearDiscriminantAnalysis())\nval_score, val_loss, train_score, train_loss =\\\n get_cv_score_and_loss(train_cp_no_t, target,\n                       model_pipe, transformer=None,\n                       k=10, show_score_loss_graphs=True)\n\nprint(f'mean cv val score: {val_score:.2f}\\nmean cv val loss {val_loss:.2f}')\nprint(f'mean cv train score: {train_score:.2f}\\nmean cv train loss {train_loss:.2f}')","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:33.320603Z","iopub.execute_input":"2023-01-17T11:25:33.321005Z","iopub.status.idle":"2023-01-17T11:25:34.345494Z","shell.execute_reply.started":"2023-01-17T11:25:33.320967Z","shell.execute_reply":"2023-01-17T11:25:34.343197Z"},"trusted":true},"execution_count":328,"outputs":[{"output_type":"display_data","data":{"text/plain":"Calculating Length          | 0/? [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"17ae0ec88ded47fab9413c2d4dff6304"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Computing Models:   0%|          | 0/10 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c5b8ff209bd0430c9e8c0baa3310d2ed"}},"metadata":{}},{"name":"stdout","text":"mean cv val score: 0.79\nmean cv val loss 0.21\nmean cv train score: 0.80\nmean cv train loss 0.20\n","output_type":"stream"}]},{"cell_type":"markdown","source":"![](https://i.ibb.co/4Sjhfb7/lda1.png)\n![](https://i.ibb.co/DrDLWLC/lda2.png)","metadata":{}},{"cell_type":"markdown","source":"**According to our findings, algorithm KNN provides us with the most accurate results, lets check our findings with CM and KPI's**","metadata":{}},{"cell_type":"markdown","source":"# CM and KPI's","metadata":{}},{"cell_type":"markdown","source":"**Confusion Matrix**\n\n**with confusion metrix we are able to expain the results of a classifier in a binary method, CM is divided into 4 types:**\n1. TP (True Positive) - The model classified correctly that a sample is positive.\n1. TN (True Negative) - The model classified correctly that a sample is negative.\n1. FP (False Positive) - The model classified a sample as positive but the sample is actually negative.\n1. FN (False Negative) - The model classified a sample as negative but the sample is actually positive.","metadata":{}},{"cell_type":"code","source":"# calculate cm for train and val\nX_train, X_test, t_train, t_test =\\\n sklearn.model_selection.train_test_split(\n    train_cp.drop('Survived',axis=1), target, test_size=0.1, random_state=42)\n\nmodel_pipe = make_pipeline(StandardScaler(), KNeighborsClassifier(n_neighbors=18)).fit(X_train, t_train)\ny_train = model_pipe.predict(X_train)\ny_val = model_pipe.predict(X_test)\ncm_train = confusion_matrix(t_train, y_train)\n\ncm_val = confusion_matrix(t_test, y_val)\n\nprint('cm_train')\nprint(cm_train)\nprint()\nprint('cm_val')\nprint(cm_val)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:34.349257Z","iopub.execute_input":"2023-01-17T11:25:34.349651Z","iopub.status.idle":"2023-01-17T11:25:34.670802Z","shell.execute_reply.started":"2023-01-17T11:25:34.349616Z","shell.execute_reply":"2023-01-17T11:25:34.669430Z"},"trusted":true},"execution_count":329,"outputs":[{"name":"stdout","text":"cm_train\n[[464  31]\n [106 200]]\n\ncm_val\n[[48  6]\n [ 9 27]]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Plot the confusion matrix with Seaborn**","metadata":{}},{"cell_type":"code","source":"%matplotlib inline\n# lot confusion matrix of train and val as heatmaps in seaborn\ncm_train_df = pd.DataFrame(cm_train, index=['real_survived', 'real_not_survived'],\n                           columns=['predicted_survived', 'predicted_not_survived'])\n\ncm_val_df = pd.DataFrame(cm_val, index=['real_survived', 'real_not_survived'],\n                           columns=['predicted_survived', 'predicted_not_survived'])\n\nsns.set(font_scale=2)\nfig = plt.figure(figsize = (30,12))\nfig.suptitle('confusion matrixs',fontsize=32)\nax1 = fig.add_subplot(221)\nsns.heatmap(cm_train_df, annot=True, cmap=plt.cm.Pastel1, fmt='g')\nax1.title.set_text(\"cm_train\")\n\nax2 = fig.add_subplot(222)\nsns.heatmap(cm_val_df, annot=True, cmap=plt.cm.Pastel2, fmt='g')\nax2.title.set_text(\"cm_val\")\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:34.672746Z","iopub.execute_input":"2023-01-17T11:25:34.673074Z","iopub.status.idle":"2023-01-17T11:25:36.554221Z","shell.execute_reply.started":"2023-01-17T11:25:34.673047Z","shell.execute_reply":"2023-01-17T11:25:36.550941Z"},"trusted":true},"execution_count":330,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 2160x864 with 4 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"**according to the confusion matrix, we can see that out of 495 survivers, 67 were falsely predicted (False Positive) as non-survivers.**\n\n**of the 306 non-survivers, 98 were predicted (False Negetive) as survivers**","metadata":{}},{"cell_type":"markdown","source":"**KPIs**\n\n**another way looking at a CM is by calculating its Key Performence Indicators or KPI's in short, lets look at the 5 main KPI's:**\n\n1. Precision: The percentage of correct positive predictions out of all the positive predictions.\n1. Recall: The percentage of correct positive predictions out of all the actual positive samples.\n1. Specificity: The percentage of correct negative predictions out of all the actual negative samples.\n1. FPR: The percentage of mistaken negative predictions out of all the actual negative samples.\n1. Accuracy: The percentage of correct predictions out of all the data.","metadata":{}},{"cell_type":"code","source":"# calculate precision, recall, specificity, fpr and accuracy\ndef precision(cm):\n    tn, fp, fn, tp = cm.ravel()\n    return tp/(tp+fp)\n\ndef recall(cm):\n    tn, fp, fn, tp = cm.ravel()\n    return tp/(tp+fn)\n\ndef specificity(cm):\n    tn, fp, fn, tp = cm.ravel()\n    return tn/(tn+fp)\n\ndef fpr(cm):\n    tn, fp, fn, tp = cm.ravel()\n    return fp/(fp+tn)\n\ndef accuracy(cm):\n    tn, fp, fn, tp = cm.ravel()\n    return (tp+tn)/(tp+tn+fp+fn)\n\nprint(f'Train: precision {precision(cm_train):.2f}, recall {recall(cm_train):.2f}, specificity {specificity(cm_train):.2f}, fpr {fpr(cm_train):.2f}, accuracy {accuracy(cm_train):.2f}')\nprint(f'Val:   precision {precision(cm_val):.2f}, recall {recall(cm_val):.2f}, specificity {specificity(cm_val):.2f}, fpr {fpr(cm_val):.2f}, accuracy {accuracy(cm_val):.2f}')","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:36.557800Z","iopub.execute_input":"2023-01-17T11:25:36.558608Z","iopub.status.idle":"2023-01-17T11:25:36.575292Z","shell.execute_reply.started":"2023-01-17T11:25:36.558570Z","shell.execute_reply":"2023-01-17T11:25:36.571212Z"},"trusted":true},"execution_count":331,"outputs":[{"name":"stdout","text":"Train: precision 0.87, recall 0.65, specificity 0.94, fpr 0.06, accuracy 0.83\nVal:   precision 0.82, recall 0.75, specificity 0.89, fpr 0.11, accuracy 0.83\n","output_type":"stream"}]},{"cell_type":"code","source":"tick_label = ['prec', 'recall', 'spec', 'fpr', 'acc']\nheight  = [precision(cm_train)*100, recall(cm_train)*100, specificity(cm_train)*100, fpr(cm_train)*100, accuracy(cm_train)*100]\nleft = [1, 2 ,3, 4, 5]\nplt.xlabel(\"KPI's\")\nplt.ylabel('Value')\nplt.bar(left, height, tick_label = tick_label,\n        width = 0.4, color = ['red', 'green','blue','yellow','black'])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:36.578350Z","iopub.execute_input":"2023-01-17T11:25:36.578872Z","iopub.status.idle":"2023-01-17T11:25:37.161394Z","shell.execute_reply.started":"2023-01-17T11:25:36.578805Z","shell.execute_reply":"2023-01-17T11:25:37.159091Z"},"trusted":true},"execution_count":332,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"**we can clearly see that the precision is higher than the recall, which means the model is more likely to predict a sample as 'survived' even if the latter is false**","metadata":{}},{"cell_type":"markdown","source":"**We can also use the previous methods to calculate the more complicated KPI's such as F1 Score(The harmonic mean of precision and recall) and Balanced Accuracy(The arithmetic means of recall and specificity)**\n\n**Higher the F1 Score and Balanced Accuracy denotes a better quality classifier.**","metadata":{}},{"cell_type":"code","source":"# calculate f1 and balanced accuracy\ndef f1(cm):\n    precision_calc = precision(cm)\n    recall_calc = recall(cm)\n    return (2*precision_calc*recall_calc)/(precision_calc+recall_calc)\n\ndef balanced_accuracy(cm):\n    recall_calc = recall(cm)\n    specificity_calc = specificity(cm)\n    return (recall_calc+specificity_calc)/2\n\nprint(f'Train: f1 {f1(cm_train):.2f}, balanced_accuracy {balanced_accuracy(cm_train):.2f}')\nprint(f'Val:   f1 {f1(cm_val):.2f}, balanced_accuracy {balanced_accuracy(cm_val):.2f}')","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:37.163030Z","iopub.execute_input":"2023-01-17T11:25:37.163357Z","iopub.status.idle":"2023-01-17T11:25:37.182754Z","shell.execute_reply.started":"2023-01-17T11:25:37.163326Z","shell.execute_reply":"2023-01-17T11:25:37.179803Z"},"trusted":true},"execution_count":333,"outputs":[{"name":"stdout","text":"Train: f1 0.74, balanced_accuracy 0.80\nVal:   f1 0.78, balanced_accuracy 0.82\n","output_type":"stream"}]},{"cell_type":"code","source":"tick_label = ['f1', 'balanced_accuracy']\nheight  = [f1(cm_train)*100, balanced_accuracy(cm_train)*100]\nleft = [1, 2]\nplt.xlabel(\"KPI's\")\nplt.ylabel('Value')\nplt.bar(left, height, tick_label = tick_label,\n        width = 0.4, color = ['red', 'green'])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:37.187688Z","iopub.execute_input":"2023-01-17T11:25:37.188016Z","iopub.status.idle":"2023-01-17T11:25:37.673332Z","shell.execute_reply.started":"2023-01-17T11:25:37.187985Z","shell.execute_reply":"2023-01-17T11:25:37.669269Z"},"trusted":true},"execution_count":334,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"**Threshold allows us to map the sigmoid output of a binary classification to a binary category.**\n\n**Lets see how to CM is effected by trying different threhold values.**","metadata":{}},{"cell_type":"code","source":"# plot graph of precision and recall as function of the threshold\ndef plot_precision_recall_by_threshold(labels, probabilities):\n    precision_recall_df = pd.DataFrame(columns=['threshold', 'precision', 'recall'])\n    for threshold in np.linspace(0.1, 1, 9, endpoint=False):\n        preds = np.where(probabilities[:,1] > threshold, 1, 0)\n        cm = confusion_matrix(labels, preds)\n        precision_recall_df.loc[len(precision_recall_df)] = [threshold, precision(cm), recall(cm)]\n    fig = px.line(precision_recall_df, x='threshold', y=['precision', 'recall'])\n    #fig.show()\n\nmodel_pipe_log = make_pipeline(StandardScaler(), SGDClassifier(loss='log', random_state=42)).fit(X_train, t_train)\ny_proba_train = model_pipe_log.predict_proba(X_train)\ny_proba_val = model_pipe_log.predict_proba(X_test)\nplot_precision_recall_by_threshold(t_train, y_proba_train)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:37.692968Z","iopub.execute_input":"2023-01-17T11:25:37.693400Z","iopub.status.idle":"2023-01-17T11:25:37.950832Z","shell.execute_reply.started":"2023-01-17T11:25:37.693365Z","shell.execute_reply":"2023-01-17T11:25:37.947673Z"},"trusted":true},"execution_count":335,"outputs":[]},{"cell_type":"markdown","source":"![](https://i.ibb.co/ZKwHYLc/treshold.png)","metadata":{}},{"cell_type":"markdown","source":"**According to our findings:**\n1. If this score is higher than 0.6, we know that the sample is predicted as positive.\n1. If this score is lower than 0.6, we know that the sample is predicted as negative.","metadata":{}},{"cell_type":"markdown","source":"# ROC AND AUC\n\n**There is another graph that shows our model behavior based on threshold, This graph is called Receiver Operating Characteristic or ROC in short.**","metadata":{}},{"cell_type":"code","source":"# plot ROC curve and calculate AUC score\ndef plot_roc_curve(labels, probabilities):\n    auc_score = roc_auc_score(labels, probabilities[:,1])\n    fpr, tpr, thresholds = roc_curve(labels, probabilities[:,1], pos_label=1)\n    roc_df = pd.DataFrame({'fpr': fpr, 'tpr': tpr, 'thresholds': thresholds})\n    fig = px.line(roc_df, x='fpr', y='tpr', title=f'AUC: {auc_score:.2f}')\n    #fig.show()\n\nmodel_pipe_log = make_pipeline(StandardScaler(), SGDClassifier(loss='log', random_state=1)).fit(X_train, t_train)\ny_proba_train = model_pipe_log.predict_proba(X_train)\ny_proba_val = model_pipe_log.predict_proba(X_test)\nplot_roc_curve(t_train, y_proba_train)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:37.954034Z","iopub.execute_input":"2023-01-17T11:25:37.954436Z","iopub.status.idle":"2023-01-17T11:25:38.096348Z","shell.execute_reply.started":"2023-01-17T11:25:37.954403Z","shell.execute_reply":"2023-01-17T11:25:38.093774Z"},"trusted":true},"execution_count":336,"outputs":[]},{"cell_type":"markdown","source":"![](https://i.ibb.co/PYqrjJR/auc.png)","metadata":{}},{"cell_type":"markdown","source":"**When the threshold is moving from right to left, the False Positive Rate is getting bigger (more FP) and the recall is getting bigger too (less fn).** \n\n**We can make a score out of it and call it AUC, the area under the curve. The bigger the AUC, the better the model performance.**\n\n**We found out that the AUC is equal to 0.84 which means the model is more likely to give us accurate results.**","metadata":{}},{"cell_type":"markdown","source":"# Submit","metadata":{}},{"cell_type":"code","source":"y_pred = model_pipe.predict(test_cp)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_id,\n        \"Survived\": y_pred\n    })\n\nsubmission.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2023-01-17T11:25:38.104454Z","iopub.execute_input":"2023-01-17T11:25:38.109073Z","iopub.status.idle":"2023-01-17T11:25:38.283313Z","shell.execute_reply.started":"2023-01-17T11:25:38.109029Z","shell.execute_reply":"2023-01-17T11:25:38.280983Z"},"trusted":true},"execution_count":337,"outputs":[]},{"cell_type":"markdown","source":"Submissions","metadata":{}},{"cell_type":"markdown","source":"![](https://i.ibb.co/C1sRKWK/Screenshot-2023-01-10-222653.png)\n![](https://i.ibb.co/5FZ87Fn/Screenshot-2023-01-10-223008.png)","metadata":{}},{"cell_type":"markdown","source":"# Summary\n\nIn conclusion, using backward feature selection allowed me to drop another field and find the optimal sets of data inorder to get the most accurate model.\n\nWith GridSearch I was able to play with the different hyper-parameters and by using more complex algorithms I found out that KNN was the best option for me.\n\nWith the confusion metrix and the Key Performence Indicators I was able to evaluate the model in ways I wasn't able before.\n\nFinally, with all the new tools i've learned, I was able to predicte the survival chance on the titanic with greater accuracy.","metadata":{}},{"cell_type":"markdown","source":"# References\n\n[**Titanic Survival: A complete guide for Beginners**\n](http://https://www.kaggle.com/code/blurredmachine/titanic-survival-a-complete-guide-for-beginners)\n\n**Moodle Notebooks 5-8**\n\n[**ROC_AUC & Decision Boundary for Titanic survival**](https://www.kaggle.com/code/akshaypawar7/roc-auc-decision-boundary-for-titanic-survival)","metadata":{}}]}